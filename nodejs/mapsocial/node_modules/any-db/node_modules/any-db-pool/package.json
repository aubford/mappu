{
  "name": "any-db-pool",
  "version": "0.0.2",
  "description": "AnyDB connection pool",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": "",
  "author": "",
  "license": "BSD",
  "dependencies": {
    "generic-pool": "~2.0.2",
    "once": "~1.1.1"
  },
  "readme": "# any-db-pool - database agnostic connection pool\n\n[![Build Status](https://secure.travis-ci.org/grncdr/node-any-db.png?branch=master)](http://travis-ci.org/grncdr/node-any-db-pool)\n\n## Synopsis\n\n```javascript\nvar ConnectionPool = require('any-db-pool')\nvar mysql = require('mysql')\n\nvar adapter = {\n  createConnection: function (opts, callback) {\n    var conn = mysql.createConnection(opts, callback)\n    conn.connect(function (err) {\n      if (err) callback(err)\n      else callback(null, conn)\n    })\n    return conn\n  },\n  createQuery: mysql.createQuery\n}\n\nvar pool = new ConnectionPool(adapter, {user: 'scott', password: 'tiger'}, {\n  min: 5,\n  max: 15,\n  reset: function (conn, done) { conn.query('ROLLBACK', done) }\n})\n\n// Proxies to mysql's connection.query\nvar q = pool.query('SELECT 1', function (err, res) { })\n```\n\n## Description\n\nThis module contains a database connection pool that can be used with any\ndriver, though it is designed to integrate well with [any-db][any-db], a\nminimal database abstraction layer. If you are writing a library that needs to\nsupport multiple database backends (e.g. SQLite3 or Postgres or MySQL) then it's\nhighly encouraged that you use [any-db][any-db] and **not** this\nmodule.\n\nIf, on the other hand, you just need a connection pool for your application this\nshould work for you with very little fuss.\n\n[any-db]: http://npm.im/any-db\n\n## Why wouldn't I just use `generic-pool`?\n\n[generic-pool][gpool] is awesome, but it's *very* generic.  This is a Good Thing\nfor a library with \"generic\" in the name, but not so good for the very common\nbut slightly more specialized case of pooling stateful database connection. This\nlibrary uses `generic-pool` and simply augments it with some added niceties:\n\n* Hooks for initializing and/or resetting connection state when connections are\n\tadded to the pool.\n* A `query` method that allows queries to be performed without the user needing\n\ta reference to a connection object (and potentially leaking that reference).\n\n[gpool]: http://npm.im/generic-pool\n\n## Installation\n\n`npm install any-db-pool`\n\n## API\n\n### module.exports\n\n    var ConnectionPool = require('any-db-pool')\n    var pool = new ConnectionPool(adapter, connectionParams, options)\n\nThe module exports a single constructor function, conventionally named\n`ConnectionPool`. This constructor expects 3 arguments:\n\n* `adapter` - An object with `createConnection` and `createQuery` methods. See\n\t[adapter interface](#adapterinterface) below for details.\n* `connectionParams` - An argument for `adapter.createConnection` to create connections.\n* `options` - an object with any of the following keys (defaults shown):\n\n * `min: 2` The minimum number of connections to keep open in the pool.\n\n * `max: 10` The maximum number of connections to allow in the pool.\n\n * `onConnect: function (conn, done) { done(null, conn) }`\n\n\t Called immediately after a connection is first established. Use this to do\n\t one-time setup of new connections. You must call `done(error, connection)`\n\t for the connection to actually make it into the pool.\n\n * `reset: function (conn, done) { done(null) }`,\n\n\t Called each time the connection is returned to the pool. Use this to restore\n\t your connection to it's original state (e.g. rollback transactions, set the\n\t user or encoding).\n\n### Adapter Interface\n\nAdapter objects must support the following method signatures:\n\n`adapter.createConnection(connectionParams, callback)` - Create a new database\nconnection using `connectionParams`. Callback **must** be called with either an\nerror (`callback(error)`) or the connection itself (`callback(null, conn)`). The\nconnection is expected to adhere to the [any-db Connection\ninterface](https://github.com/grncdr/node-any-db#connection).\n\n`adapter.createQuery(statement, params, callback)` - Create and return a new\nquery object that can be later executed with [connection.query][conn_query].\n(note that this requires the connection objects query method to support being\ncalled with a pre-constructed query object).\n\n[conn_query]: https://github.com/grncdr/node-any-db#connectionquery\n\n### ConnectionPool\n\nConnectionPool instances are created with [createPool](#exportscreatepool). They\nhave also been moved into their own module\n[any-db-pool](http://npm.im/any-db-pool)\n\n#### ConnectionPool.query\n\n`var query = pool.query(stmt, [params], [callback])`\n\nPerform a SQL query using the first available connection, and automatically\nrelease the connection after the query has completed.\n\n#### ConnectionPool.acquire\n\n`pool.acquire(function (err, conn) { ... })`\n\nRemove a connection from the pool. If you use this method you **must** return\nthe connection back to the pool using [ConnectionPool.release](#connectionpoolrelease).\n\n#### ConnectionPool.release\n\n`pool.release(conn)`\n\nReturn a connection to the pool. This should only be called with connections\nyou've manually [acquired](#connectionpoolacquire), and you **must not**\ncontinue to use the connection after releasing it.\n\n#### ConnectionPool.close\n\nStop giving out new connections, and close all existing database connections as\nthey are returned to the pool.\n\n#### ConnectionPool events\n\n * `'close'` - emitted when the connection pool has closed all of it\n\t connections after a call to `close()`.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "any-db-pool@0.0.2",
  "dist": {
    "shasum": "0bc85674f5233b9746b057092057de0f8984a4ca"
  },
  "_from": "any-db-pool@*",
  "_resolved": "https://registry.npmjs.org/any-db-pool/-/any-db-pool-0.0.2.tgz"
}
